// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/share/share.proto

package go_micro_videoservice

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for CreateShareService service

type CreateShareService interface {
	CreateShare(ctx context.Context, in *CreateShareParam, opts ...client.CallOption) (*CreateShareResponse, error)
}

type createShareService struct {
	c    client.Client
	name string
}

func NewCreateShareService(name string, c client.Client) CreateShareService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.videoservice"
	}
	return &createShareService{
		c:    c,
		name: name,
	}
}

func (c *createShareService) CreateShare(ctx context.Context, in *CreateShareParam, opts ...client.CallOption) (*CreateShareResponse, error) {
	req := c.c.NewRequest(c.name, "CreateShareService.CreateShare", in)
	out := new(CreateShareResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CreateShareService service

type CreateShareServiceHandler interface {
	CreateShare(context.Context, *CreateShareParam, *CreateShareResponse) error
}

func RegisterCreateShareServiceHandler(s server.Server, hdlr CreateShareServiceHandler, opts ...server.HandlerOption) error {
	type createShareService interface {
		CreateShare(ctx context.Context, in *CreateShareParam, out *CreateShareResponse) error
	}
	type CreateShareService struct {
		createShareService
	}
	h := &createShareServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CreateShareService{h}, opts...))
}

type createShareServiceHandler struct {
	CreateShareServiceHandler
}

func (h *createShareServiceHandler) CreateShare(ctx context.Context, in *CreateShareParam, out *CreateShareResponse) error {
	return h.CreateShareServiceHandler.CreateShare(ctx, in, out)
}
